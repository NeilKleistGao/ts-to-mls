class A: { x: number }

class B: {}

def tupleIt: (string) -> ((unit -> (string), ))

def swap: (({ x: number }, {}, )) -> ((B, A, ))

class FFF[T]: { fff: (T) -> (unit) }

def fff: (FFF[string]) -> ((string) -> (unit))

def foo[T, U]: (((T) & (U), )) -> (unit)

def vec2: (number) -> ((number) -> ((number, number, )))

def s: (bool) -> (((string) | (number), ((number) | (false)) | (true), ))

def ex[T, U]: (T) -> ((U) -> ((T, U, (T) & (U), )))

def third: ((number, number, number, )) -> (number)

def getFFF: unit -> (FFF[number])

def twoFunctions: (((number) -> (number), (number) -> (number), )) -> ((number) -> (number))

def conv: ({ y: number }) -> (({ y: number }, { z: string }, ))

def value: ((string, bool, )) -> (bool)

def key: ((string, bool, )) -> (string)

def s2: ((bool, (string) | (number), )) -> ((string) | (number))

